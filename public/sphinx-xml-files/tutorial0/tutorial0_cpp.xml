<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.15.2 -->
<document source="/Users/hsor001/Projects/Webstorm/test-sphinx/docs/tutorials/tutorial0/tutorial0_cpp.rst">
    <target refid="tutorial0-cpp"></target>
    <section ids="tutorial-0-installation-and-testing-in-c tutorial0-cpp" names="tutorial\ 0:\ installation\ and\ testing\ in\ c++ tutorial0_cpp">
        <title>Tutorial 0: Installation and testing in C++</title>
        <paragraph><strong>TODO</strong> Update this with binary/Docker/something else installation instructions</paragraph>
        <topic classes="contents local" ids="contents" names="contents">
            <title>Contents</title>
            <bullet_list>
                <list_item>
                    <paragraph><reference ids="id1" refid="create-the-libcellml-library">1: Create the libCellML library</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id2" refid="build-and-instal-the-library">2: Build and instal the library</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id3" refid="test-the-installation-by-running-your-first-tutorial">3: Test the installation by running your first tutorial</reference></paragraph>
                </list_item>
            </bullet_list>
        </topic>
        <section ids="create-the-libcellml-library" names="1:\ create\ the\ libcellml\ library">
            <title refid="id1">1: Create the libCellML library</title>
            <container classes="dothis">
                <paragraph><strong>1.a</strong> Create an empty folder and navigate into it.</paragraph>
                <literal_block force="False" highlight_args="{}" language="console" linenos="False" xml:space="preserve">mkdir MyLibCellMLDirectory
cd MyLibCellMLDirectory</literal_block>
            </container>
            <container classes="dothis">
                <paragraph><strong>1.b</strong> Clone the branch from the libCellML library github repository.
                    This will create and populate a folder called <literal classes="code">libcellml</literal>.</paragraph>
                <literal_block force="False" highlight_args="{}" language="console" linenos="False" xml:space="preserve">git clone -b master --single-branch https://github.com/cellml/libcellml.git</literal_block>
            </container>
            <paragraph>Your folder structure is now:</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">── MyLibCellMLDirectory
    └─ libcellml
        └─ ( ... contains the files you cloned )</literal_block>
            <container classes="dothis">
                <paragraph><strong>1.c</strong> Rename the cloned <literal classes="code">libcellml</literal> folder to be <literal classes="code">source</literal>, and create sibling folders called <literal classes="code">build</literal>, <literal classes="code">install</literal>, and <literal classes="code">tutorials</literal>:</paragraph>
                <literal_block force="False" highlight_args="{}" language="console" linenos="False" xml:space="preserve">mv libcellml source
mkdir build
mkdir install
mkdir tutorials</literal_block>
            </container>
            <paragraph>Your folder structure should now look like this:</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">── MyLibCellMLDirectory
    ├─ build
    │   └─ ( ... empty )
    ├─ install
    │   └─ ( ... empty )
    ├─ source
    │   └─ ( ... contains the files you cloned )
    └─ tutorials
        └─ ( ... empty )</literal_block>
        </section>
        <section ids="build-and-instal-the-library" names="2:\ build\ and\ instal\ the\ library">
            <title refid="id2">2: Build and instal the library</title>
            <container classes="dothis">
                <paragraph><strong>2.a</strong> Navigate into the <literal classes="code">MyLibCellMLDirectory/build</literal> directory to make the library:</paragraph>
                <literal_block force="False" highlight_args="{}" language="console" linenos="False" xml:space="preserve">cd build
cmake -DINSTALL_PREFIX=../install -DTUT_PREFIX=../tutorials ../source
make -j</literal_block>
            </container>
            <paragraph>You should see output which runs through some checks (make sure they all pass), and finishes with a message like this:</paragraph>
            <literal_block force="False" highlight_args="{}" language="console" linenos="False" xml:space="preserve">   ( ... lots of checks ... )
-- Configuring done
-- Generating done
-- Build files have been written to: /Users/YourName/MyLibCellMLDirectory/build</literal_block>
            <container classes="dothis">
                <paragraph><strong>2.b</strong> From the same location, instal the library:</paragraph>
                <literal_block force="False" highlight_args="{}" language="console" linenos="False" xml:space="preserve">make -j install</literal_block>
            </container>
            <paragraph>You should see output which finishes with a list of library and include files
                like this:</paragraph>
            <literal_block force="False" highlight_args="{}" language="console" linenos="False" xml:space="preserve">Install the project...
-- Install configuration: "Debug"
-- Installing: /Users/YourName/MyLibCellMLDirectory/build/../install/lib/libcellmld.0.2.0.dylib
-- Installing: /Users/kmoy001/MyLibCellMLDirectory/build/../install/lib/libcellmld.dylib
    ...</literal_block>
            <paragraph>Your directory structure should now look like:</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">── MyLibCellMLDirectory
    ├─ build
    │   └─ ( ... lots of files from the build )
    ├─ install
    │   ├─ include
    │   └─ lib
    ├─ source
    │   └─ ( ... the files you cloned in step 1.b )
    └─ tutorials
        └─ ( ... a collection of folders explained below )</literal_block>
        </section>
        <section ids="test-the-installation-by-running-your-first-tutorial" names="3:\ test\ the\ installation\ by\ running\ your\ first\ tutorial">
            <title refid="id3">3: Test the installation by running your first tutorial</title>
            <paragraph>All the documentation and tutorials are inside the <literal classes="code">docs</literal> folder within
                the initial cloned directory, but in order to keep your source tree clean,
                the <literal classes="code">tutorials</literal> directory has been copied into the directory given by the
                <literal classes="code">-DTUT_PREFIX</literal> argument when you built the library.  If you’ve used the
                same structure as outlined here, this will be the
                <literal classes="code">MyLibCellMLDirectory/tutorials</literal> directory.</paragraph>
            <container classes="dothis">
                <paragraph><strong>3.a</strong> Navigate into the <literal classes="code">MyLibCellMLDirectory/tutorials</literal> directory to see its contents:</paragraph>
                <literal_block force="False" highlight_args="{}" language="console" linenos="False" xml:space="preserve">cd tutorials</literal_block>
            </container>
            <paragraph>You should see a list of directories like this:</paragraph>
            <block_quote>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>images (ignore this one)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>quickstart (ignore this one too)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>resources
                            - This directory contains input files for tutorials which you’ll need later on.</paragraph>
                        <block_quote>
                            <paragraph>These tutorials have been designed so that they will build from one to another, but if you’ve missed an earlier tutorial you can always copy the required files from this folder instead.</paragraph>
                        </block_quote>
                    </list_item>
                    <list_item>
                        <paragraph>solver
                            - The solver directory has simple scripts to run a numerical integration on your model.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>tutorial0 ( … to tutorial8)
                            - The tutorial directories contain the bulk of what you’ll need, including skeleton code to get you started, as well as instructions for both C++ and Python, and completed code in case you get stuck.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>utilities
                            - The utilities directory contains some commonly used scripts and functions which make life easier.</paragraph>
                    </list_item>
                </bullet_list>
            </block_quote>
            <container classes="dothis">
                <paragraph><strong>3.b</strong> Navigate into the <literal classes="code">tutorial0</literal> directory to run CMake to create the Makefile.
                    Note that you will need to specify the path to the <literal classes="code">install</literal> directory using the <literal classes="code">-DINSTALL_PREFIX</literal> flag.</paragraph>
                <literal_block force="False" highlight_args="{}" language="console" linenos="False" xml:space="preserve">cd tutorial0
cmake -DINSTALL_PREFIX=../../install .</literal_block>
            </container>
            <paragraph>If this is correct you should see an output ending similar to this:</paragraph>
            <literal_block force="False" highlight_args="{}" language="console" linenos="False" xml:space="preserve">-- The C compiler identification is AppleClang 10.0.1.10010046
-- The CXX compiler identification is AppleClang 10.0.1.10010046
-- Check for working C compiler: /Library/Developer/CommandLineTools/usr/bin/cc
-- Check for working C compiler: /Library/Developer/CommandLineTools/usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /Library/Developer/CommandLineTools/usr/bin/c++
-- Check for working CXX compiler: /Library/Developer/CommandLineTools/usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Configuring done
-- Generating done
-- Build files have been written to: /Users/YourName/MyLibCellMLDirectory/tutorials/tutorial0</literal_block>
            <paragraph>If this isn’t what you see then please see the Troubleshooting section <strong>TODO</strong></paragraph>
            <container classes="dothis">
                <paragraph><strong>3.c</strong> Now build the <literal classes="code">tutorial0</literal> example</paragraph>
                <literal_block force="False" highlight_args="{}" language="console" linenos="False" xml:space="preserve">make -j</literal_block>
            </container>
            <paragraph>You should see an output similar to this:</paragraph>
            <literal_block force="False" highlight_args="{}" language="console" linenos="False" xml:space="preserve">Scanning dependencies of target tutorial1
[ 50%] Building CXX object CMakeFiles/tutorial1.dir/tutorial1.cpp.o
[100%] Linking CXX executable tutorial1
[100%] Built target tutorial1</literal_block>
            <container classes="dothis">
                <block_quote>
                    <paragraph><strong>3.d</strong> Finally, run the program to output the welcome and version number of the linked libCellML instalation:</paragraph>
                </block_quote>
                <literal_block force="False" highlight_args="{}" language="console" linenos="False" xml:space="preserve">./tutorial0</literal_block>
            </container>
            <paragraph>You should see the output of:</paragraph>
            <literal_block force="False" highlight_args="{}" language="console" linenos="False" xml:space="preserve">-----------------------------------------------
    Welcome to libCellML!
    This version number is 0.2.0
-----------------------------------------------</literal_block>
            <container classes="dothis">
                <paragraph><strong>3.e</strong> Go and have a cuppa, you’re done!</paragraph>
            </container>
        </section>
    </section>
</document>
