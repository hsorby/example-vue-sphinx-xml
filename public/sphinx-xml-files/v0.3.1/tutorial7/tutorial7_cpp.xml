<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.15.2 -->
<document source="/Users/hsor001/Projects/Webstorm/test-sphinx/docs/tutorials/tutorial7/tutorial7_cpp.rst">
    <target refid="tutorial7-cpp"></target>
    <section ids="tutorial-7-c-creating-the-sodium-channel tutorial7-cpp" names="tutorial\ 7\ c++:\ creating\ the\ sodium\ channel tutorial7_cpp">
        <title>Tutorial 7 C++: Creating the sodium channel</title>
        <paragraph>The outline for this tutorial is shown on the <reference internal="True" refuri="outline7#tutorial7"><inline classes="std std-ref">Tutorial 7</inline></reference>
            page. These are the C++ instructions.  For the same tutorial in Python
            please see the <reference internal="True" refuri="tutorial7_py#tutorial7-py"><inline classes="std std-ref">Tutorial 7 in Python</inline></reference> page instead.</paragraph>
        <paragraph>Resources:</paragraph>
        <block_quote>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><download_reference filename="cd08de09e569f9bd97ef2ceecd6370cc/CMakeLists.txt" refdoc="tutorials/tutorial7/tutorial7_cpp" refdomain="" refexplicit="False" reftarget="CMakeLists.txt" reftype="download" refwarn="False"><literal classes="xref download">CMakeLists.txt</literal></download_reference> The CMake file for building this tutorial</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="91198f0dc42b6ac02d82cbeb637a30d3/tutorial7.cpp" refdoc="tutorials/tutorial7/tutorial7_cpp" refdomain="" refexplicit="False" reftarget="tutorial7.cpp" reftype="download" refwarn="False"><literal classes="xref download">tutorial7.cpp</literal></download_reference> Either the skeleton code, or ..</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="3194eb94b3f387d0dce8534245f7604c/tutorial7_complete.cpp" refdoc="tutorials/tutorial7/tutorial7_cpp" refdomain="" refexplicit="False" reftarget="tutorial7_complete.cpp" reftype="download" refwarn="False"><literal classes="xref download">tutorial7_complete.cpp</literal></download_reference> the completed tutorial code</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="8192634a62640f3ebc119bcf6fb5a5cb/tutorial_utilities.h" refdoc="tutorials/tutorial7/tutorial7_cpp" refdomain="" refexplicit="False" reftarget="../utilities/tutorial_utilities.h" reftype="download" refwarn="False"><literal classes="xref download">../utilities/tutorial_utilities.h</literal></download_reference> and
                        <download_reference filename="d162f9cdd516bade1fd19abc2849f8b8/tutorial_utilities.cpp" refdoc="tutorials/tutorial7/tutorial7_cpp" refdomain="" refexplicit="False" reftarget="../utilities/tutorial_utilities.cpp" reftype="download" refwarn="False"><literal classes="xref download">../utilities/tutorial_utilities.cpp</literal></download_reference>  Utility functions for
                        use in the tutorials.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>If you did not complete Tutorial 5 you can download the file created
                        there from <download_reference filename="1103898c8b7a18491b36c82cd9ed3c9b/tutorial7_SodiumChannelModel.cellml" refdoc="tutorials/tutorial7/tutorial7_cpp" refdomain="" refexplicit="False" reftarget="../resources/tutorial7_SodiumChannelModel.cellml" reftype="download" refwarn="False"><literal classes="xref download">../resources/tutorial7_SodiumChannelModel.cellml</literal></download_reference></paragraph>
                </list_item>
            </bullet_list>
        </block_quote>
        <topic classes="contents local" ids="contents" names="contents">
            <title>Contents</title>
            <bullet_list>
                <list_item>
                    <paragraph><reference ids="id1" refid="setup">0: Setup</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id2" refid="create-the-sodium-channel-component">1: Create the sodium channel component</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id3" refid="create-the-m-gate-component">2: Create the m-gate component</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id4" refid="create-the-h-gate-component">3: Create the h-gate component</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id5" refid="create-the-environment-component">4: Create the environment component</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id6" refid="connect-the-components">5: Connect the components</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id7" refid="set-the-driving-function">6: Set the driving function</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id8" refid="set-the-initial-conditions">7: Set the initial conditions</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id9" refid="generate-and-output-the-model">8: Generate and output the model</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id10" refid="run-the-model">9: Run the model</reference></paragraph>
                </list_item>
            </bullet_list>
        </topic>
        <section ids="setup" names="0:\ setup">
            <title refid="id1">0: Setup</title>
            <container classes="dothis">
                <paragraph><strong>0.a</strong> Create a model instance and name it appropriately.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>0.b</strong> Create a validator for later use.</paragraph>
            </container>
        </section>
        <section ids="create-the-sodium-channel-component" names="1:\ create\ the\ sodium\ channel\ component">
            <title refid="id2">1: Create the sodium channel component</title>
            <container classes="dothis">
                <paragraph><strong>1.a</strong> Create a component instance for the sodium channel and name it
                    appropriately.  Add the component to the model.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>1.b</strong> Add the mathematics to this component according to:</paragraph>
            </container>
            <math_block docname="tutorials/tutorial7/tutorial7_cpp" label="True" nowrap="False" number="True" xml:space="preserve">Na_{conductance} = g_{Na} h m^{3}

i_{Na} = Na_{conductance} (V-E_{Na})</math_block>
            <container classes="dothis">
                <paragraph><strong>1.c</strong> Call the validator and print its debugging information.  This will
                    help to summarise the variables which you need to add:</paragraph>
            </container>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><math>V</math> voltage, mV</paragraph>
                </list_item>
                <list_item>
                    <paragraph><math>t</math> time, ms</paragraph>
                </list_item>
                <list_item>
                    <paragraph><math>h</math> h-gate status, dimensionless</paragraph>
                </list_item>
                <list_item>
                    <paragraph><math>m</math> m-gate status, dimensionless</paragraph>
                </list_item>
                <list_item>
                    <paragraph><math>g_{Na} \;\; mS/cm^2</math>, (ie: milli-Siemens per square centimetre),
                        initially 120</paragraph>
                </list_item>
                <list_item>
                    <paragraph><math>E_{Na} \;\; mV</math>, initially 35</paragraph>
                </list_item>
                <list_item>
                    <paragraph><math>i_{Na} \;\; \mu A/cm^2</math>, (ie: micro-Amperes per square centimetre)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><math>Na_{conductance}  \;\;  mS/cm^2</math></paragraph>
                </list_item>
            </bullet_list>
            <container classes="dothis">
                <paragraph><strong>1.d</strong> Again call the validator to list the units you will need to add to
                    the parent model.  Remember that these will include the units of any constant
                    values present in the MathML block too.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>1.e</strong> Validate that the model is now free of errors.</paragraph>
            </container>
        </section>
        <section ids="create-the-m-gate-component" names="2:\ create\ the\ m-gate\ component">
            <title refid="id3">2: Create the m-gate component</title>
            <container classes="dothis">
                <paragraph><strong>2.a</strong> Create a new component for the m-gate and name it appropriately.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.b</strong> Create the MathML required to represent the mathematics governing
                    the m-gate, as in three equations shown below, and add to the component.
                    Remember that you will need to add the appropriate units to the constants to
                    ensure consistency throughout.</paragraph>
            </container>
            <math_block docname="tutorials/tutorial7/tutorial7_cpp" label="True" nowrap="False" number="True" xml:space="preserve">\alpha_m = \frac {-0.1(V+50)}{e^{-0.1(V+50)}-1}

\beta_m = 4 e^{\frac {-(V+75)} {18}}

\dot m = \frac {dm}{dt} = \alpha_m(1-m)-m\beta_m</math_block>
            <container classes="dothis">
                <paragraph><strong>2.c</strong> Call the validator and use it to summarise the variables you need
                    to add into this component, along with their units and initial conditions.</paragraph>
            </container>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><math>V</math> voltage, mV</paragraph>
                </list_item>
                <list_item>
                    <paragraph><math>t</math> time, ms</paragraph>
                </list_item>
                <list_item>
                    <paragraph><math>\alpha_m</math> rate constant, 1/ms</paragraph>
                </list_item>
                <list_item>
                    <paragraph><math>\beta_m</math> rate constant, 1/ms</paragraph>
                </list_item>
                <list_item>
                    <paragraph><math>m</math> gate status, dimensionless, initially 0.05</paragraph>
                </list_item>
            </bullet_list>
            <container classes="dothis">
                <paragraph><strong>2.d</strong> Call the validator and use it to list any remaining units which
                    are not yet defined in the model.  Add them in as needed.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.e</strong> Validate that the model is now free of errors.</paragraph>
            </container>
        </section>
        <section ids="create-the-h-gate-component" names="3:\ create\ the\ h-gate\ component">
            <title refid="id4">3: Create the h-gate component</title>
            <container classes="dothis">
                <paragraph><strong>3.a-c</strong> Repeat the procedure above to create the h-gate component and add
                    it to the model.  Its governing equations are:</paragraph>
            </container>
            <math_block docname="tutorials/tutorial7/tutorial7_cpp" label="True" nowrap="False" number="True" xml:space="preserve">\alpha_h = 0.07 e^{-0.05(V+75)}

\beta_h = \frac {1} {e^{-0.1(V+45)} + 1}

\dot {h} = \frac {dh} {dt} = \alpha_h (1-h) - h\beta_h</math_block>
            <paragraph>where:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><math>\alpha_h</math> rate constant, 1/ms</paragraph>
                </list_item>
                <list_item>
                    <paragraph><math>\beta_h</math> rate constant, 1/ms</paragraph>
                </list_item>
                <list_item>
                    <paragraph><math>V</math> voltage, mV</paragraph>
                </list_item>
                <list_item>
                    <paragraph><math>t</math> time, ms</paragraph>
                </list_item>
                <list_item>
                    <paragraph><math>h</math> gate status, dimensionless, initially 0.6</paragraph>
                </list_item>
            </bullet_list>
            <container classes="dothis">
                <paragraph><strong>3.d</strong> Check that the model is valid to this point.</paragraph>
            </container>
        </section>
        <section ids="create-the-environment-component" names="4:\ create\ the\ environment\ component">
            <title refid="id5">4: Create the environment component</title>
            <paragraph>As in the previous <reference internal="True" refuri="../tutorial5/tutorial5_cpp#tutorial5-cpp"><inline classes="std std-ref">Tutorial 5</inline></reference> we need to create an
                environment component which we’ll use to control the time and voltage in which
                the channels operate.  As before we define two variables:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><math>V</math> voltage, mV</paragraph>
                </list_item>
                <list_item>
                    <paragraph><math>t</math> time, ms</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>We will add the driving function later.</paragraph>
            <container classes="dothis">
                <paragraph><strong>4.a</strong> Define the environment component, including its variables, and add
                    to the model.  Call the validator to check that the model is still free of
                    errors.</paragraph>
            </container>
        </section>
        <section ids="connect-the-components" names="5:\ connect\ the\ components">
            <title refid="id6">5: Connect the components</title>
            <paragraph>At this stage we should have three components in the hierarchy below:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">|--- the model
   |--- the environment component
   |--- the sodium channel component
      |--- the m-gate component
      |--- the h-gate component</literal_block>
            <paragraph>You can use the <literal classes="code">printModelToTerminal</literal> utility function to check that
                this is indeed the structure that you have.</paragraph>
            <paragraph>Just as we did before, we need to connect the environment variables throughout
                the rest of the components.  Recall from <reference internal="True" refuri="../tutorial6/tutorial6_cpp#tutorial6-cpp"><inline classes="std std-ref">Tutorial 5</inline></reference> that:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>only immediate siblings, children, and parents can be connected</paragraph>
                </list_item>
                <list_item>
                    <paragraph>the kind of interface depends on the relationship between components.</paragraph>
                </list_item>
            </bullet_list>
            <container classes="dothis">
                <paragraph><strong>5.a</strong> This model involves sharing several variables between components.
                    For each of them, create the appriopriate variable equivalence using the
                    <literal classes="code">libcellml::Variable::setVariableEquivalence</literal> function.  The shared
                    variables are:</paragraph>
            </container>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><math>V</math> voltage</paragraph>
                </list_item>
                <list_item>
                    <paragraph><math>t</math> time</paragraph>
                </list_item>
                <list_item>
                    <paragraph><math>h</math> h-gate status</paragraph>
                </list_item>
                <list_item>
                    <paragraph><math>m</math> m-gate status</paragraph>
                </list_item>
            </bullet_list>
            <container classes="dothis">
                <paragraph><strong>5.b</strong> For each of the variables you connected in 5.a, set their
                    appropriate interface type using the <literal classes="code">setInterfaceType</literal> function.</paragraph>
            </container>
        </section>
        <section ids="set-the-driving-function" names="6:\ set\ the\ driving\ function">
            <title refid="id7">6: Set the driving function</title>
            <paragraph>The last step in defining your model behaviour is the driving function.  As in
                the other tutorials, this is a voltage clamp such that the voltage is held at
                a value of -20mV in the interval 5ms &lt; t &lt; 15 ms and -85mV otherwise.
                Recall that this driving function applies to the variables in the environment
                component: the variable connections you have established in 5.a will propagate
                these values throughout the model.</paragraph>
            <container classes="dothis">
                <paragraph><strong>6.a</strong> Write the MathML required for the driving function behaviour above.
                    You will need to use the <literal classes="code">&lt;piecewise&gt;</literal> function.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>6.b</strong> Validate the final model and confirm that it is error free.</paragraph>
            </container>
        </section>
        <section ids="set-the-initial-conditions" names="7:\ set\ the\ initial\ conditions">
            <title refid="id8">7: Set the initial conditions</title>
            <container classes="dothis">
                <paragraph><strong>7.a</strong> Set the initial conditions for the solver.  These are:</paragraph>
                <math_block docname="tutorials/tutorial7/tutorial7_cpp" label="True" nowrap="False" number="True" xml:space="preserve">g_{Na}(t=0) = 120 \\
E_{Na}(t=0) = 35 \\
h(t=0)=0.6 \\
m(t=0)=0.05 \\</math_block>
            </container>
        </section>
        <section ids="generate-and-output-the-model" names="8:\ generate\ and\ output\ the\ model">
            <title refid="id9">8: Generate and output the model</title>
            <paragraph>The last step is to output the model.  As previously, this happens in two ways:
                the generation of code that can be solved here, and the serialisation and
                printing of the model to a CellML file for use in later tutorials.</paragraph>
            <container classes="dothis">
                <paragraph><strong>8.a</strong> Create a <literal classes="code">Generator</literal> instance and submit the model for
                    processing.  Check that there are no errors found during the processing.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>8.b</strong> Write the interface code (.h header) and implementation code
                    (.c source) to files.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>8.c</strong>  Create a <literal classes="code">GeneratorProfile</literal> and use it to change to Python.
                    Reprocess the model, and write the implementation code (.py source) to
                    a file.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>8.d</strong> Create a <literal classes="code">Printer</literal> to serialise your model, and output it
                    to a CellML file.</paragraph>
            </container>
        </section>
        <section ids="run-the-model" names="9:\ run\ the\ model">
            <title refid="id10">9: Run the model</title>
            <paragraph>You can solve the model to simulate the dynamics of the sodium gate using the
                supplied solver.  Instructions for running this are given on the
                <reference internal="True" refuri="../solver/solver#solver"><inline classes="std std-ref">Simple solver for generated models</inline></reference> page.  You should see the
                behaviour shown in the figures below by the red line representing a voltage
                step to -20mV.  The theory of this channel’s operation
                is given in <reference internal="True" refuri="../../theory/theory_sodiumchannel#theory-sodiumchannel"><inline classes="std std-ref">Theory of the sodium channel</inline></reference>.</paragraph>
            <figure align="center" ids="tut7-vgraph" names="tut7_vgraph">
                <image alt="Driving function for the voltage clamp" candidates="{'*': 'tutorials/tutorial7/../../theory/images/tut7_Vgraph.png'}" uri="tutorials/tutorial7/../../theory/images/tut7_Vgraph.png"></image>
                <caption>Driving function for the voltage clamp</caption>
            </figure>
            <figure align="center" ids="tut7-mgraph" names="tut7_mgraph">
                <image alt="m-gate dynamics" candidates="{'*': 'tutorials/tutorial7/../../theory/images/tut7_mgraph.png'}" uri="tutorials/tutorial7/../../theory/images/tut7_mgraph.png"></image>
                <caption>m-gate dynamics</caption>
            </figure>
            <figure align="center" ids="tut7-hgraph" names="tut7_hgraph">
                <image alt="h-gate dynamics" candidates="{'*': 'tutorials/tutorial7/../../theory/images/tut7_hgraph.png'}" uri="tutorials/tutorial7/../../theory/images/tut7_hgraph.png"></image>
                <caption>h-gate dynamics</caption>
            </figure>
            <figure align="center" ids="tut7-nacond-graph" names="tut7_nacond_graph">
                <image alt="Sodium conductance" candidates="{'*': 'tutorials/tutorial7/../../theory/images/tut7_Nacond_graph.png'}" uri="tutorials/tutorial7/../../theory/images/tut7_Nacond_graph.png"></image>
                <caption>Sodium conductance</caption>
            </figure>
            <figure align="center" ids="tut7-naigraph" names="tut7_naigraph">
                <image alt="Sodium current" candidates="{'*': 'tutorials/tutorial7/../../theory/images/tut7_iNagraph.png'}" uri="tutorials/tutorial7/../../theory/images/tut7_iNagraph.png"></image>
                <caption>Sodium current</caption>
            </figure>
        </section>
    </section>
</document>
