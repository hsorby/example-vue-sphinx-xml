<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.15.2 -->
<document source="/Users/hsor001/Projects/Webstorm/test-sphinx/docs/tutorials/tutorial8/tutorial8_cpp.rst">
    <target refid="tutorial8-cpp"></target>
    <section ids="tutorial-8-c-encapsulating-components-and-working-with-parents tutorial8-cpp" names="tutorial\ 8\ c++:\ encapsulating\ components\ and\ working\ with\ parents tutorial8_cpp">
        <title>Tutorial 8 C++: Encapsulating components and working with parents</title>
        <paragraph>The outline for this tutorial is shown on the <reference internal="True" refuri="outline8#tutorial8"><inline classes="std std-ref">Tutorial 8</inline></reference>
            page. These are the C++ instructions.  For the same tutorial in Python
            please see the <reference internal="True" refuri="tutorial8_py#tutorial8-py"><inline classes="std std-ref">Tutorial 8 in Python</inline></reference> page instead.</paragraph>
        <paragraph>Resources:</paragraph>
        <block_quote>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><download_reference filename="2842872a5193617899ca2f7c0097c175/CMakeLists.txt" refdoc="tutorials/tutorial8/tutorial8_cpp" refdomain="" refexplicit="False" reftarget="CMakeLists.txt" reftype="download" refwarn="False"><literal classes="xref download">CMakeLists.txt</literal></download_reference> The CMake file for building this tutorial</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="c4a02988e4402098d311821a46364964/tutorial8.cpp" refdoc="tutorials/tutorial8/tutorial8_cpp" refdomain="" refexplicit="False" reftarget="tutorial8.cpp" reftype="download" refwarn="False"><literal classes="xref download">tutorial8.cpp</literal></download_reference> Either the skeleton code, or ..</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="8132ce856be9f54ed7722414120c5769/tutorial8_complete.cpp" refdoc="tutorials/tutorial8/tutorial8_cpp" refdomain="" refexplicit="False" reftarget="tutorial8_complete.cpp" reftype="download" refwarn="False"><literal classes="xref download">tutorial8_complete.cpp</literal></download_reference> the completed tutorial code</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="7150b0d0c196ddfcf7d84be90ab9dfa9/tutorial_utilities.h" refdoc="tutorials/tutorial8/tutorial8_cpp" refdomain="" refexplicit="False" reftarget="../utilities/tutorial_utilities.h" reftype="download" refwarn="False"><literal classes="xref download">../utilities/tutorial_utilities.h</literal></download_reference> and
                        <download_reference filename="b4571aa56ff0af3b712128bbc8a4e075/tutorial_utilities.cpp" refdoc="tutorials/tutorial8/tutorial8_cpp" refdomain="" refexplicit="False" reftarget="../utilities/tutorial_utilities.cpp" reftype="download" refwarn="False"><literal classes="xref download">../utilities/tutorial_utilities.cpp</literal></download_reference>  Utility functions for
                        use in the tutorials.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><download_reference filename="27f89c91e40185c7cfc61641e283b2eb/tutorial8_LeakageCurrentModel.cellml" refdoc="tutorials/tutorial8/tutorial8_cpp" refdomain="" refexplicit="False" reftarget="../resources/tutorial8_LeakageCurrentModel.cellml" reftype="download" refwarn="False"><literal classes="xref download">../resources/tutorial8_LeakageCurrentModel.cellml</literal></download_reference> The leakage current model</paragraph>
                </list_item>
                <list_item>
                    <paragraph>If you did not complete Tutorial 7 you can download the file created there from:
                        <download_reference filename="741c373c8cdbb08c70d2b82d3c75ff6e/tutorial8_MembraneModel.cellml" refdoc="tutorials/tutorial8/tutorial8_cpp" refdomain="" refexplicit="False" reftarget="../resources/tutorial8_MembraneModel.cellml" reftype="download" refwarn="False"><literal classes="xref download">../resources/tutorial8_MembraneModel.cellml</literal></download_reference></paragraph>
                </list_item>
            </bullet_list>
        </block_quote>
        <topic classes="contents local" ids="contents" names="contents">
            <title>Contents</title>
            <bullet_list>
                <list_item>
                    <paragraph><reference ids="id1" refid="set-the-stage">0: Set the stage</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id2" refid="read-the-membrane-component">1: Read the membrane component</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id3" refid="read-the-sodium-channel-component">2: Read the sodium channel component</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id4" refid="import-the-potassium-channel-component">3: Import the potassium channel component</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id5" refid="read-the-current-leakage-component">4: Read the current leakage component</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id6" refid="create-the-environment-component">5: Create the environment component</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id7" refid="connect-the-equivalent-variables">6: Connect the equivalent variables</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id8" refid="define-the-driving-function">7: Define the driving function</reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference ids="id9" refid="output-the-model">8: Output the model</reference></paragraph>
                </list_item>
            </bullet_list>
        </topic>
        <section ids="set-the-stage" names="0:\ set\ the\ stage">
            <title refid="id1">0: Set the stage</title>
            <paragraph>We’ll start by creating the utilities that we’ll use later on.</paragraph>
            <container classes="dothis">
                <paragraph><strong>0.a</strong> As previously, create:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>a <literal classes="code">Parser</literal> instance to deserialise the models</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>a <literal classes="code">Validator</literal> instance for debugging purposes</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>a <literal classes="code">Model</literal> model to attach everything into</paragraph>
                    </list_item>
                </bullet_list>
            </container>
        </section>
        <section ids="read-the-membrane-component" names="1:\ read\ the\ membrane\ component">
            <title refid="id2">1: Read the membrane component</title>
            <container classes="dothis">
                <paragraph><strong>1.a</strong> Just as you did in <reference internal="True" refuri="../tutorial6/tutorial6_cpp#tutorial6-cpp"><inline classes="std std-ref">Tutorial 6</inline></reference> for the potassium
                    channel, parse the <literal classes="code">Tutorial8_MembraneModel.cellml</literal> file and save the
                    deserialised model to a new model instance (<emphasis>not</emphasis> the one you’ve already
                    created above - a new one). If you’d like, use the
                    <literal classes="code">printModelToTerminal</literal> utility function to check it has been read
                    correctly, and the validator to make sure that it is valid on its own.</paragraph>
            </container>
            <paragraph>At this stage you will have two <literal classes="code">Model</literal> items - an empty one you
                created in 0.a which will become your combined model,
                and the one you’ve just read from the file.</paragraph>
            <container classes="dothis">
                <paragraph><strong>1.b</strong> Since you’ll want to reuse the membrane component from the imported
                    potassium channel model within your combined model, you need to retrieve it
                    from the imported model and add it to the combined one.  Note that you will
                    need to retrieve the membrane component from the model and use the
                    <literal classes="code">clearParent()</literal> function to detach it from
                    the membrane model <emphasis>before</emphasis> you add it to your combined model.</paragraph>
            </container>
            <container classes="nb">
                <paragraph><strong>Note</strong> that the <literal classes="code">addComponent</literal> and <literal classes="code">addVariable</literal> functions
                    have a built-in check which will prevent them from having one parent:</paragraph>
                <block_quote>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>if a <literal classes="code">Variable</literal> or <literal classes="code">Component</literal> has a <literal classes="code">nullptr</literal>
                                parent, then calling an <literal classes="code">addComponent</literal> or <literal classes="code">addVariable</literal>
                                function will insert that item into the parent component.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>if a <literal classes="code">Variable</literal> or <literal classes="code">Component</literal> already has a
                                <literal classes="code">parent()</literal> component, then nothing will be changed.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>if you need to move parent ownership of a variable or a component
                                you need to first call the <literal classes="code">clearParent()</literal> function <strong>before</strong>
                                adding it to the new parent.</paragraph>
                        </list_item>
                    </bullet_list>
                </block_quote>
            </container>
            <paragraph>Before going much further it’s probably a good idea to understand what it is
                that you’ve just imported.  For a full description of the biological theory,
                please see the <reference internal="True" refuri="../../theory/theory_hh#hh-background"><inline classes="std std-ref">Hodgkin-Huxley background</inline></reference> document. You
                should be able to see the variables and maths inside the imported component
                by simply printing the combined model to the screen.</paragraph>
            <container classes="dothis">
                <paragraph><strong>1.c</strong> Print the MathML2 string from the <literal classes="code">membrane</literal>
                    component in your combined model and check it represents the equations
                    below.  You can check back to the earlier
                    <reference internal="True" refuri="../tutorial5/tutorial5_cpp#tutorial5-cpp"><inline classes="std std-ref">Tutorial 5, step 2</inline></reference> if need be.</paragraph>
            </container>
            <math_block docname="tutorials/tutorial8/tutorial8_cpp" label="True" nowrap="False" number="True" xml:space="preserve">i_{tot} = i_{stim} + i_{Na} + i_{K} + i_{L}

\frac {dV} {dt} = \frac {-i_{tot}} {Cm}</math_block>
            <container classes="dothis">
                <paragraph><strong>1.c</strong> Call the validator to check the combined model.  At this stage we
                    expect to see errors related to missing units: we have imported a component
                    containing maths and variables, both of which reference units that we haven’t
                    yet included in the combined model:</paragraph>
            </container>
            <literal_block force="False" highlight_args="{}" language="console" linenos="False" xml:space="preserve">The validator has found 13 errors!
Validator error[0]:
  Description: Variable 'V' has an invalid units reference 'mV' that does not
  correspond with a standard unit or units in the variable's parent component or model.
  See section 11.1.1.2 in the CellML specification.

...

Validator error[8]:
  Description: Math has a cn element with a cellml:units attribute 'microA_per_cm2'
  that is not a valid reference to units in the model 'Tutorial8_HHModel' or a standard unit.</literal_block>
            <container classes="dothis">
                <paragraph><strong>1.d</strong> Use a loop to import all of the units from the the potassium
                    channel model into the combined model.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>1.e</strong> Validate the combined model once more and check that it is now free
                    of errors.</paragraph>
            </container>
        </section>
        <section ids="read-the-sodium-channel-component" names="2:\ read\ the\ sodium\ channel\ component">
            <title refid="id3">2: Read the sodium channel component</title>
            <paragraph>In <reference internal="True" refuri="../tutorial7/tutorial7_cpp#tutorial7-cpp"><inline classes="std std-ref">Tutorial 7</inline></reference> you created a component to represent the
                behaviour of a gated sodium gate and stored it inside a model.</paragraph>
            <container classes="dothis">
                <paragraph><strong>2.a</strong> As in step 1.a, retrieve the sodium channel <emphasis>model</emphasis> from the
                    file you created in Tutorial 7, or use the
                    <literal classes="code">Tutorial7_SodiumChannelModel.cellml</literal> file from the
                    <literal classes="code">resources/tutorial7</literal> folder.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.b</strong> As in step 1.b, retrieve the sodium channel <emphasis>component</emphasis> and add it to
                    the membrane component created in step 1.  Remember to clear its parent first!
                    Print the combined model to the terminal using the condensed function
                    <literal classes="code">printEncapsulationStructureToTerminal</literal> and notice that the “child”
                    components encapsulated by the <literal classes="code">sodiumChannel</literal> component - the <literal classes="code">mGate</literal>
                    and <literal classes="code">hGate</literal> components - are imported as well.</paragraph>
            </container>
            <literal_block force="False" highlight_args="{}" language="console" linenos="False" xml:space="preserve">Model 'Tutorial8_HHModel' has 1 components
 - Component 'membrane' has 1 child components
    - Component 'sodiumChannel' has 2 child components
       - Component 'mGate' has 0 child components
       - Component 'hGate' has 0 child components
|</literal_block>
            <container classes="dothis">
                <paragraph><strong>2.c</strong> Call the validator to check the combined model so far.  At this
                    stage we expect to see two kinds of errors:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>errors related to units missing from the combined model, as before.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>TODO</strong> errors related to the equivalent variables connections between the
                            <literal classes="code">sodiumChannel</literal> component (which is now in the combined model) and the
                            <literal classes="code">environment</literal> component (which is still in the <literal classes="code">sodiumChannelModel</literal>).  Since
                            the components are no longer adjacent in the encapsulation hierarchy, they
                            cannot be connected.</paragraph>
                    </list_item>
                </bullet_list>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.d</strong> Import the missing units into the combined model from the sodium
                    channel model.  Revalidate the combined model and pay attention to errors
                    related to the units.</paragraph>
            </container>
            <container classes="nb">
                <paragraph><strong>Note</strong> that you cannot have units with duplicate names in a model: if
                    you have simply imported <emphasis>all</emphasis> of the units from the
                    <literal classes="code">sodiumChannelModel</literal>, then there will be double-ups.  You can use
                    the <literal classes="code">model-&gt;hasUnits</literal> function to check whether a <literal classes="code">Units</literal> item
                    with the same name exists in the model before importing it.</paragraph>
            </container>
            <paragraph>After validation you should see that there are no more errors
                related to units, but you will still need to address the illegal connections
                between variables in the newly-moved sodiumChannel component and the old
                environment component in the sodiumChannelModel.</paragraph>
            <literal_block force="False" highlight_args="{}" language="console" linenos="False" xml:space="preserve">**PUT ERRORS HERE WHEN VALIDATOR IS WORKING**</literal_block>
            <paragraph>Recall the idiom you used in <reference internal="True" refuri="../tutorial6/tutorial6_cpp#tutorial6-cpp"><inline classes="std std-ref">Tutorial 6</inline></reference> to <emphasis>create</emphasis> the
                connections between equivalent variables:</paragraph>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">// Retrieving the pointers to the variables via their names and adding an equivalence
libcellml::Variable::addEquivalence(environment-&gt;variable("t"), potassiumChannel-&gt;variable("t"));
libcellml::Variable::addEquivalence(environment-&gt;variable("t"), nGate-&gt;variable("t"));</literal_block>
            <paragraph>The same can be done in reverse here to <emphasis>remove</emphasis> the equivalence between two
                variables:</paragraph>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">// Retrieving the pointers to the variables via their names and removing an equivalence
libcellml::Variable::removeEquivalence(
    sodiumChannelModel-&gt;component("environment")-&gt;variable("t"),
    sodiumChannel-&gt;variable("t")
);</literal_block>
            <container classes="dothis">
                <paragraph><strong>2.e</strong> Disconnect any equivalences between variables in the
                    <literal classes="code">environment</literal> component of the
                    <literal classes="code">sodiumChannelModel</literal> model, from those inside the newly-moved
                    <literal classes="code">sodiumChannel</literal> component in the combined model.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>2.f</strong> Validate the combined model to see that it is now free of errors.</paragraph>
            </container>
        </section>
        <section ids="import-the-potassium-channel-component" names="3:\ import\ the\ potassium\ channel\ component">
            <title refid="id4">3: Import the potassium channel component</title>
            <paragraph>Now we simply need to repeat the same process for our potassium channel
                component and add it to the combined model.</paragraph>
            <container classes="dothis">
                <paragraph><strong>3.a-b</strong> Repeat the process above to import the potassium channel
                    component that was created in <reference internal="True" refuri="../tutorial6/tutorial6_cpp#tutorial6-cpp"><inline classes="std std-ref">Tutorial 6</inline></reference> into the
                    membrane component.  Note that if you did not complete that tutorial
                    you can simply copy the <literal classes="code">tutorial6_PotassiumComponentModel.cellml</literal>
                    file from the <literal classes="code">resources/tutorial8</literal> folder.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>3.c</strong> Use the validator to alert you to the errors at this stage.</paragraph>
            </container>
            <paragraph>If you have used the files provided in the <literal classes="code">resources</literal> folder, you
                can expect to see errors at this point relating to missing units.
                This is because even though both the sodium and potassium channel components
                require the same set of units, each of them has used different names for them.
                At this stage you have a choice:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>either import all the units under their original names from the
                        potassium channel as well,</paragraph>
                </list_item>
                <list_item>
                    <paragraph>or rename the units throughout the <literal classes="code">potassiumChannel</literal>
                        component’s variables and maths.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Here we’ll go with the latter to illustrate the process, and to create a more
                compact model description.</paragraph>
            <container classes="dothis">
                <paragraph><strong>3.d</strong>  Use the examples below to rename the units referenced by variables
                    inside this component.  This is straightforward:</paragraph>
            </container>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">// Setting the names of units to be consistent with those in the combined model
potassiumChannel-&gt;variable("t")-&gt;setUnits("ms");
potassiumChannel-&gt;component("nGate")-&gt;variable("t")-&gt;setUnits("ms");
... etc ...</literal_block>
            <paragraph>You’ll also need to replace the units of any constants in the
                MathML blocks of the components as well.  This is not quite as
                straightforward, but we’ve provided a utility function
                <literal classes="code">switchUnitsInMaths</literal> which does a string replacement for
                the unit names.  The function can be used like this:</paragraph>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">// The switchUnitsInMaths function's definition in tutorial_utilities.h:
void switchUnitsInMaths(std::string &amp;maths, std::string in, std::string out);

// Switch the name of the units referred to in a MathML string
// Retrieve the MathML string from the component
std::string nGateMaths = potassiumChannel-&gt;component("nGate")-&gt;math();

// Switch the unit names in the string
switchUnitsInMaths(nGateMaths, "millivolt", "mV");

// Repeat for all units ...

// Remember to add the corrected string back into the component when you're done</literal_block>
            <container classes="nb">
                <paragraph><strong>Note</strong> that a simple string replacement for any and all occurrences of the <literal classes="code">in</literal>
                    string within the <literal classes="code">maths</literal> string with the <literal classes="code">out</literal> string could cause problems
                    when the <literal classes="code">in</literal> string is a substring of another unit name.  In order to be
                    sure that <strong>only</strong> full name matches for units are replaced, we exploit
                    the fact that the units names in the MathML string will be in quotation marks, and include
                    <literal classes="code">\"</literal> blocks on either side of the <literal classes="code">in</literal> and <literal classes="code">out</literal>
                    strings for safety.  <strong>You will therefore need to substitute whole names only for this
                        function to work.</strong></paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>3.e</strong> Rename the units in the MathML strings as needed.  Remember
                    that you’ll need to re-add the corrected MathML string to the
                    component when you’re done:</paragraph>
            </container>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">potassiumChannel-&gt;component("nGate")-&gt;setMath(nGateMaths);</literal_block>
            <literal_block force="False" highlight_args="{}" language="console" linenos="False" xml:space="preserve">Switched units 'millivolt' for units 'mV'
Switched units 'millisecond' for units 'ms'
Switched units 'per_millisecond' for units 'per_ms'
Switched units 'per_millivolt_millisecond' for units 'per_mV_ms'
Switched units 'milliS_per_cm2' for units 'mS_per_cm2'
|</literal_block>
            <container classes="dothis">
                <paragraph><strong>3.f</strong> As you did in step 2.e, disconnect the variable equivalences which
                    link the imported component to the old environment in the
                    <literal classes="code">potassiumChannelModel</literal>, and validate that the combined model
                    is now free of errors.</paragraph>
            </container>
        </section>
        <section ids="read-the-current-leakage-component" names="4:\ read\ the\ current\ leakage\ component">
            <title refid="id5">4: Read the current leakage component</title>
            <container classes="dothis">
                <paragraph><strong>4.a</strong> If you know the tune, sing along!  Import the leakage component
                    from the model in
                    <literal classes="code">resources/tutorial8/Tutorial8_LeakageModel.cellml</literal>
                    and add it to the <literal classes="code">membrane</literal> component.  Use the validator to debug
                    and make any adjustments you need to until your combined model is free of
                    errors.</paragraph>
            </container>
        </section>
        <section ids="create-the-environment-component" names="5:\ create\ the\ environment\ component">
            <title refid="id6">5: Create the environment component</title>
            <paragraph>Now your model should have the encapsulation structure shown below.  You can
                check this in the same way as you did in step 2.b.</paragraph>
            <literal_block force="False" highlight_args="{}" language="console" linenos="False" xml:space="preserve">Model 'Tutorial8_HHModel' has 1 components
- Component 'membrane' has 3 child components
 - Component 'sodiumChannel' has 2 child components
     - Component 'mGate' has 0 child components
     - Component 'hGate' has 0 child components
 - Component 'potassiumChannel' has 1 child components
     - Component 'nGate' has 0 child components
 - Component 'leakageCurrent' has 0 child components
|</literal_block>
            <paragraph>The final component you need to add is an <literal classes="code">environment</literal> component for
                this combined model.  This contains the time <math>t</math> of
                the simulation as well as the membrane voltage <math>V</math>.</paragraph>
            <container classes="dothis">
                <paragraph><strong>5.a</strong> Create a new <literal classes="code">Component</literal> to represent the environment,
                    and add it to your combined model as a top-level component.</paragraph>
                <paragraph><strong>5.b</strong> Include the local environment variables that you’ll need, including
                    their units, and validate that your model is free of errors.</paragraph>
            </container>
        </section>
        <section ids="connect-the-equivalent-variables" names="6:\ connect\ the\ equivalent\ variables">
            <title refid="id7">6: Connect the equivalent variables</title>
            <paragraph>The encapsulation structure for this model has several tiers, as shown in the
                diagram below:</paragraph>
            <literal_block force="False" highlight_args="{}" language="text" linenos="False" xml:space="preserve">____ HodgkinHuxleyModel
        |
        |____ environment (V, t)
        |
        |____ membrane (V, t)
                |
                |____ sodiumChannel (V, t, h, m)
                |      |
                |      |____ hGate (h, V, t)
                |      |
                |      |____ mGate (m, V, t)
                |
                |____ potassiumChannel (n, V, t)
                |      |
                |      |____ nGate (n, V, t)
                |
                |____ leakageCurrent (V)</literal_block>
            <paragraph>The encapsulation structure above includes the variables in each component
                which are shared with an adjacent component.</paragraph>
            <container classes="dothis">
                <paragraph><strong>6.a</strong> Set the equivalent variables according to the diagram above.  Note
                    that the gates remain connected to the sodium and potassium channels, so don’t
                    need to be added again.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>6.b</strong> Using the same interface type rules as in
                    <reference internal="True" refuri="../tutorial7/outline7#tutorial7"><inline classes="std std-ref">Tutorial 7</inline></reference>, set the interface type for the missing
                    interfaces.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>6.c</strong> Validate that the final model is free of errors.</paragraph>
            </container>
        </section>
        <section ids="define-the-driving-function" names="7:\ define\ the\ driving\ function">
            <title refid="id8">7: Define the driving function</title>
            <paragraph>In contrast to earlier tutorials, this simulation will not be a voltage clamp
                experiment, but will model instead the response to a stimulus current in the
                membrane. You’ve already got some maths inside the <literal classes="code">membrane</literal>
                component which you imported in step 1.b which defined the influence of the
                total membrane current <math>i_{tot}</math> on the voltage, <math>V</math>.  It also
                defined the total current as the sum of currents in the potassium channel
                <math>i_K</math>, the sodium channel <math>i_{Na}</math>, the leakage current
                <math>i_L</math>, as well as an as-yet unused variable, the stimulus current
                <math>i_{stim}</math>.  To constrain the mathematics completely, you’ll need to
                add a definition for this stimulus current.</paragraph>
            <container classes="dothis">
                <paragraph><strong>7.a</strong> Create a <reference internal="False" refuri="https://www.w3.org/TR/MathML2/chapter4.html#id.4.2.1.3">MathML2</reference> equation to represent the stimulus
                    current having a value of 100 mA/cm^2 between 1ms &lt; t &lt; 1.2ms and zero
                    otherwise.</paragraph>
                <paragraph><strong>7.b</strong> Because there is already a maths block (with
                    <literal classes="code">&lt;math&gt;...&lt;/math&gt;</literal> tags at both ends) you can’t just add new equation
                    on the end of what’s there - it needs to be added before the final
                    <literal classes="code">&lt;/math&gt;</literal> tag.  There’s a utility function to help with this called
                    <literal classes="code">void insertIntoMathMLString(std::string &amp;insertInto, std::string &amp;stringToInsert)</literal></paragraph>
            </container>
            <literal_block force="False" highlight_args="{}" language="cpp" linenos="False" xml:space="preserve">// Inserting the new MathML string before the closing &lt;/math&gt; tag
std::string membraneMathML = membrane-&gt;math();
insertIntoMathMLString(membraneMathML, stimulusEquation);</literal_block>
        </section>
        <section ids="output-the-model" names="8:\ output\ the\ model">
            <title refid="id9">8: Output the model</title>
            <paragraph>Finally you’re ready to write the model ready for simulation.  You know the
                drill.</paragraph>
            <container classes="dothis">
                <paragraph><strong>8.a</strong> Create a <literal classes="code">Generator</literal> instance and pass the model to it for
                    processing.</paragraph>
            </container>
            <container classes="dothis">
                <paragraph><strong>8.b</strong> Check the <literal classes="code">Generator</literal> for errors.  You can expect to see ones
                    related to:</paragraph>
            </container>
        </section>
    </section>
</document>
